<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * The administrator table for requests.
 *
 * @package    local_extension
 * @author     Nicholas Hoobin <nicholashoobin@catalyst-au.net>
 * @copyright  Catalyst IT
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

namespace local_extension\local\table\requests;

if (!defined('MOODLE_INTERNAL')) {
    die('Direct access to this script is forbidden.'); // It must be included from a Moodle page.
}

require_once($CFG->libdir.'/tablelib.php');

use html_writer;
use local_extension\state;
use local_extension\utility;
use moodle_url;
use stdClass;
use table_sql;

/**
 * The administrator table for requests.
 *
 * @package    local_extension
 * @author     Nicholas Hoobin <nicholashoobin@catalyst-au.net>
 * @copyright  Catalyst IT
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class request_list extends table_sql {

    /** @var int Incrementing table id. */
    protected static $autoid = 0;

    /** @var string SELECT */
    protected $select;

    /** @var string FROM */
    protected $from;

    /** @var string WHERE */
    protected $where;

    /** @var array Array of joins. */
    protected $joins;

    /** @var array Array of parameters. */
    protected $params;

    /** @var string Date output format. */
    protected $format;

    /**
     * Constructor
     * @param moodle_url $baseurl
     * @param string|null $id to be used by the table, autogenerated if null.
     */
    public function __construct($baseurl, $id = null, $downloading = false) {
        global $CFG;

        $id = (is_null($id) ? self::$autoid++ : $id);
        parent::__construct('local_extension' . $id);

        $columns = [];
        $columns[] = 'rid';
        if (!$downloading) {
            $columns[] = 'userpic';
        }
        $columns[] = 'fullname';
        $columns[] = 'timestamp';
        $columns[] = 'length';
        $columns[] = 'newduedate';
        $columns[] = 'coursename';
        $columns[] = 'activity';
        $columns[] = 'state';
        $columns[] = 'lastmod';

        $headers = [];
        $headers[] = get_string('table_header_index_requestid', 'local_extension');
        if (!$downloading) {
            $headers[] = get_string('table_header_index_user', 'local_extension');
        }
        $headers[] = get_string('fullnameuser');
        $headers[] = get_string('table_header_index_requestdate', 'local_extension');
        $headers[] = get_string('table_header_index_requestlength', 'local_extension');
        $headers[] = get_string('table_header_index_newduedate', 'local_extension');
        $headers[] = get_string('course');
        $headers[] = get_string('activity');
        $headers[] = get_string('status');
        $headers[] = get_string('lastmodified');

        // If idnumber exists in showuseridentity, we splice it into the header and columns.
        $showuseridentityfields = explode(',', $CFG->showuseridentity);
        if (in_array('idnumber', $showuseridentityfields)) {
            array_splice($columns, 3, 0, 'idnumber');
            array_splice($headers, 3, 0, get_string('idnumber'));
        }

        $this->define_columns($columns);

        $this->define_headers($headers);

        $this->define_baseurl($baseurl);

        // Example: 'Wed, 26 Oct 2016 3:12PM'.
        $this->format = '%a, %e %b %Y %l:%M %p';

        $this->no_sorting('userpic');

        // Default sorting on the timestamp descending.
        $this->sortable(true, 'timestamp', SORT_DESC);

        $this->collapsible(false);
    }

    /**
     * Consumes the input parameters and sets the table SQL.
     *
     * @param integer $categoryid
     * @param integer $courseid
     * @param integer $stateid
     * @param string $search
     * @param string $faculty
     * @return bool
     */
    public function generate_query($categoryid, $courseid, $stateid, $search, $faculty) {
        return false;
    }

    /**
     * Appends the faculty search to the list of where and params.
     *
     * @param string $faculty
     */
    public function apply_faculty($faculty) {
        global $DB;

        if (empty($faculty)) {
            return;
        }

        $this->where[] = $DB->sql_like('c.shortname', ':faculty', false, false);

        $this->params['faculty'] = "%$faculty%";
    }

    /**
     * Appends the text search to the list of where and params.
     *
     * @param string $search
     */
    public function apply_search($search) {
        global $DB, $CFG;

        if (empty($search)) {
            return;
        }

        $showuseridentityfields = explode(',', $CFG->showuseridentity);

        $fullname = $DB->sql_fullname('u.firstname', 'u.lastname');

        $wherestr  = "(" . $DB->sql_like($fullname, ':search1', false, false);
        $wherestr .= " OR " . $DB->sql_like('c.fullname', ':search2', false, false);

        if (in_array('idnumber', $showuseridentityfields)) {
            $wherestr .= " OR " . $DB->sql_like('u.idnumber', ':search3', false, false);
            $this->params['search3'] = "%$search%";
        }

        $wherestr .= " OR " . $DB->sql_like('lcm.name', ':search4', false, false);

        $wherestr .= " OR r.id = :search5) ";

        $this->where[] = $wherestr;

        $this->params['search1'] = "%$search%";
        $this->params['search2'] = "%$search%";
        $this->params['search4'] = "%$search%";
        $this->params['search5'] = intval($search);
    }

    /**
     * Column for rid.
     *
     * @param stdClass $values
     * @return string
     */
    public function col_rid($values) {
        if ($this->is_downloading()) {
            return $values->rid;
        }

        $requesturl = new moodle_url('/local/extension/status.php', ['id' => $values->rid]);
        $requestlink = html_writer::link($requesturl, $values->rid);
        return $requestlink;
    }

    /**
     * Column for userpic.
     *
     * @param stdClass $values
     * @return string
     */
    public function col_userpic($values) {
        global $OUTPUT;
        if ($this->is_downloading()) {
            return '-';
        }

        return $OUTPUT->user_picture($values, ['size' => 35, 'courseid' => $values->courseid]);
    }

    /**
     * Column for fullname.
     *
     * @param stdClass $values
     * @return string
     */
    public function col_fullname($values) {
        if ($this->is_downloading()) {
            return fullname($values);
        }

        $moodleurl = new moodle_url('/user/view.php', ['id' => $values->userid, 'course' => $values->courseid]);

        $link = html_writer::link($moodleurl, fullname($values));

        return html_writer::tag('b', $link);
    }

    /**
     * Column for timestamp.
     *
     * @param stdClass $values
     * @return string
     */
    public function col_timestamp($values) {
        return userdate($values->timestamp, $this->format);
    }

    /**
     * Column for extension length.
     *
     * @param stdClass $values
     * @return string
     */
    public function col_length($values) {
        $requestlength = utility::calculate_length($values->length);

        if ($this->is_downloading()) {
            return $requestlength;
        }

        return html_writer::div($requestlength, 'lastmodby');
    }

    /**
     * Column for extension new due date.
     *
     * @param stdClass $values
     * @return string
     */
    public function col_newduedate($values) {
        return userdate($values->newduedate, $this->format);
    }

    /**
     * Column for course name.
     *
     * @param stdClass $values
     * @return string
     */
    public function col_coursename($values) {
        if ($this->is_downloading()) {
            return $values->coursename;
        }

        $requesturl = new moodle_url('/local/extension/status.php', ['id' => $values->rid]);

        return html_writer::link($requesturl, $values->coursename);
    }

    /**
     * Column for activity name.
     *
     * @param stdClass $values
     * @return string
     */
    public function col_activity($values) {
        if ($this->is_downloading()) {
            return $values->activity;
        }

        $requesturl = new moodle_url('/local/extension/status.php', ['id' => $values->rid]);

        return html_writer::link($requesturl, $values->activity);
    }

    /**
     * Column for status.
     *
     * @param stdClass $values
     * @return string
     */
    public function col_state($values) {
        if ($this->is_downloading()) {
            return state::instance()->get_state_name($values->state, true);
        }

        $cmstate = state::instance()->get_state_name($values->state);
        return html_writer::div($cmstate, 'lastmodby');
    }

    /**
     * Column for last modified date.
     *
     * @param stdClass $values
     * @return string
     */
    public function col_lastmod($values) {
        $delta = $values->lastmod - time();

        $show = format_time($delta);

        $num = strtok($show, ' ');

        $unit = strtok(' ');

        $show = "$num $unit";

        $lastmodstring = get_string('ago', 'message', $show);

        $lastmod  = html_writer::start_div('lastmodby');
        $lastmod .= html_writer::tag('span', $lastmodstring);
        $lastmod .= html_writer::end_div();

        if ($this->is_downloading()) {
            return $lastmodstring;
        }

        return $lastmod;
    }

    /**
     * Column for user id number.
     *
     * @param stdClass $values
     * @return string
     */
    public function col_idnumber($values) {
        if ($this->is_downloading()) {
            return $values->idnumber;
        }

        $moodleurl = new moodle_url('/user/view.php', ['id' => $values->userid, 'course' => $values->courseid]);

        $link = html_writer::link($moodleurl, $values->idnumber);

        return html_writer::div($link, 'lastmodby');

    }

}

<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * The flexible_table for managing the rules.
 *
 * @package    local_extension
 * @author     Nicholas Hoobin <nicholashoobin@catalyst-au.net>
 * @copyright  Catalyst IT
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

namespace local_extension\local\table;

use flexible_table;
use moodle_url;
use html_writer;
use local_extension\rule;

defined('MOODLE_INTERNAL') || die();

require_once($CFG->libdir . '/tablelib.php');

/**
 * The flexible_table for managing the rules.
 *
 * @package    local_extension
 * @author     Nicholas Hoobin <nicholashoobin@catalyst-au.net>
 * @copyright  Catalyst IT
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class rules extends flexible_table {

    /** @var int Incrementing table id. */
    private static $autoid = 0;

    /**
     * Constructor
     * @param string|null $id to be used by the table, autogenerated if null.
     */
    public function __construct($id = null) {
        global $PAGE;
        $id = (is_null($id) ? self::$autoid++ : $id);
        parent::__construct('local_extension' . $id);

        $columns = array(
            'name',
            'action',
            'role',
            'parent',
            'datatype',
            'priority',
            'data',
            ''
        );

        $headers = array(
            get_string('table_header_rule_name', 'local_extension'),
            get_string('table_header_rule_action', 'local_extension'),
            get_string('table_header_rule_actionable', 'local_extension'),
            get_string('table_header_rule_parent', 'local_extension'),
            get_string('table_header_rule_datatype', 'local_extension'),
            get_string('table_header_rule_priority', 'local_extension'),
            get_string('table_header_rule_data', 'local_extension'),
            '',
        );

        $this->define_columns($columns);
        $this->define_headers($headers);
        $this->define_baseurl($PAGE->url);

        $this->set_attribute('class', 'generaltable admintable');
        $this->set_attribute('cellspacing', '0');

        $this->setup();
    }

    /**
     * Sets data for the table.
     *
     * @param rule[] $rules
     * @param rule $parent
     * @return bool
     */
    public function set_data(array $rules, rule $parent = null) {
        global $PAGE;

        $renderer = $PAGE->get_renderer('local_extension');

        if (empty($rules)) {
            return false;
        }

        foreach ($rules as $id => $rule) {

            if (empty($rule->parent)) {

                // Adding an empty row to divide sets of rules.
                $empty = array();
                for ($i = 0; $i < count($this->columns); $i++) {
                    $empty[] = '';
                }

                // Do not add the clear row for the first element.
                if ($rule !== reset($rules)) {
                    $this->add_data($empty, 'clearrow');
                }

            }

            $buttons = array();

            $editurl = new moodle_url('/local/extension/rules/edit.php', array(
                'id' => $rule->id,
                'datatype' => $rule->datatype,
                'sesskey' => sesskey()
            ));

            $edithtml = html_writer::empty_tag('img', array(
                'src' => $renderer->image_url('t/edit'),
                'alt' => get_string('edit'),
                'class' => 'iconsmall'
            ));

            $deleteurl = new moodle_url('/local/extension/rules/delete.php', array(
                'id' => $rule->id,
                'sesskey' => sesskey()
            ));

            $deletehtml = html_writer::empty_tag('img', array(
                'src' => $renderer->image_url('t/delete'),
                'alt' => get_string('delete'),
                'class' => 'iconsmall'
            ));

            $buttons[] = html_writer::link(
                $editurl,
                $edithtml,
                array('title' => get_string('edit'))
            );

            $buttons[] = html_writer::link(
                $deleteurl,
                $deletehtml,
                array('title' => get_string('delete'))
            );

            $parentstr = null;
            if (!empty($parent)) {
                $parentstr = $parent->name;
            }

            $values = array(
                $rule->name,
                $rule->get_action_name(),
                $rule->get_role_name(),
                $parentstr,
                $rule->datatype,
                $rule->priority + 1,
                $renderer->render_trigger_rule_text($rule, $parentstr),
                implode(' ', $buttons)
            );

            $this->add_data($values);

            // Render the child items.
            if (!empty($rule->children)) {
                $this->set_data($rule->children, $rule);
            }
        }

        return true;
    }

}
